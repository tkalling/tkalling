Generate a simple random sample from attrition_pop of fifty rows, setting the seed to 2022.
Calculate the mean employee Attrition in the sample.
Calculate the relative error between mean_attrition_srs50 and mean_attrition_pop as a percentage.

# Generate a simple random sample of 50 rows, with seed 2022
attrition_srs50 = attrition_pop.sample(n=50, random_state=2022)

# Calculate the mean employee attrition in the sample
mean_attrition_srs50 = attrition_srs50['Attrition'].mean()

# Calculate the relative error percentage
rel_error_pct50 = 100 * abs(mean_attrition_pop - mean_attrition_srs50) / mean_attrition_pop

# Print rel_error_pct50
print(rel_error_pct50)


Calculate the relative error percentage again. This time, use a simple random sample of one hundred rows of attrition_pop.

# Calculate the relative error percentage
rel_error_pct100 = 100 * abs(mean_attrition_pop-mean_attrition_srs100)/ mean_attrition_pop

# Print rel_error_pct100
print(rel_error_pct100)


The plot shows the relative error in the proportion of employee attritions, using simple random sampling, for sample sizes from 2 to 1470 (the size of the population). 
Clicking "Regenerate plot" will select new samples for each sample size, and calculate the relative errors again.
Which statement about relative errors and sample sizes is true?

For small sample sizes, each additional entry in a sample can result in substantial decreases to the relative error.


Replicate the provided code so that it runs 500 times. Assign the resulting list of sample means to mean_attritions.

# Create an empty list
mean_attritions = []
# Loop 500 times to create 500 sample means
for i in range(500):
	mean_attritions.append(
    	attrition_pop.sample(n=60)['Attrition'].mean()
	)
  
# Print out the first few entries of the list
print(mean_attritions[0:5])

Draw a histogram of the mean_attritions list with 16 bins.

# Create a histogram of the 500 sample means
plt.hist(mean_attritions, bins=16)
plt.show()

Expand a grid representing 5 8-sided dice. That is, create a DataFrame with five columns from a dictionary, named die1 to die5. 
The rows should contain all possibilities for throwing five dice, each numbered 1 to 8.

# Expand a grid representing 5 8-sided dice
dice = expand_grid(
    {'die1': [1, 2, 3, 4, 5, 6, 7, 8],
    'die2': [1, 2, 3, 4, 5, 6, 7, 8],
    'die3': [1, 2, 3, 4, 5, 6, 7, 8],
    'die4': [1, 2, 3, 4, 5, 6, 7, 8],
    'die5': [1, 2, 3, 4, 5, 6, 7, 8]
    }
    )

# Print the result
print(dice)

Add a column, mean_roll, to dice, that contains the mean of the five rolls as a categorical.

# Add a column of mean rolls and convert to a categorical
dice['mean_roll'] = (dice['die1'] +
                    dice['die2'] +
                    dice['die3'] +
                    dice['die4'] + 
                    dice['die5'])/5 
                     
                    
dice['mean_roll'] = dice['mean_roll'].astype('category')

# Print result
print(dice)


# Add a column of mean rolls and convert to a categorical
dice['mean_roll'] = (dice['die1'] + dice['die2'] + 
                     dice['die3'] + dice['die4'] + 
                     dice['die5']) / 5
dice['mean_roll'] = dice['mean_roll'].astype('category')

# Draw a bar plot of mean_roll
dice['mean_roll'].value_counts(sort=False).plot(kind="bar")
plt.show()


Sample one to eight, five times, with replacement. Assign to five_rolls.
Calculate the mean of five_rolls.

# Sample one to eight, five times, with replacement
five_rolls = np.random.choice(list(range(1, 9)), size=5, replace=True)

# Print the mean of five_rolls
print(five_rolls.mean())'


Replicate the sampling code 1000 times, assigning each result to the list sample_means_1000.

# Replicate the sampling code 1000 times
sample_means_1000 = []
for i in range(1000):
    sample_means_1000.append(
  		np.random.choice(list(range(1, 9)), size=5, replace=True).mean()
    )
    
# Print the first 10 entries of the result
print(sample_means_1000[0:10])


Plot sample_means_1000 as a histogram with 20 bins.

# Replicate the sampling code 1000 times
sample_means_1000 = []
for i in range(1000):
    sample_means_1000.append(
  		np.random.choice(list(range(1, 9)), size=5, replace=True).mean()
    )

# Draw a histogram of sample_means_1000 with 20 bins
plt.hist(sample_means_1000, bins=20)
plt.show()


Calculate the mean of sampling_distribution_5, sampling_distribution_50, and sampling_distribution_500 (a mean of sample means).

# Calculate the mean of the mean attritions for each sampling distribution
mean_of_means_5 = np.mean(sampling_distribution_5)
mean_of_means_50 = np.mean(sampling_distribution_50)
mean_of_means_500 = np.mean(sampling_distribution_500)

# Print the results
print(mean_of_means_5)
print(mean_of_means_50)
print(mean_of_means_500)


How does sample size affect the mean of the sample means?

Regardless of sample size, the mean of the sampling distribution is a close approximation to the population mean.

Calculate the standard deviation of sampling_distribution_5, sampling_distribution_50, and sampling_distribution_500 (a standard deviation of sample means).

# Calculate the std. dev. of the mean attritions for each sampling distribution
sd_of_means_5 = np.std(sampling_distribution_5, ddof=1)
sd_of_means_50 = np.std(sampling_distribution_50, ddof=1)
sd_of_means_500 = np.std(sampling_distribution_500, ddof=1)

# Print the results
print(sd_of_means_5)
print(sd_of_means_50)
print(sd_of_means_500)

How are the standard deviations of the sampling distributions related to the population standard deviation and the sample size?

The standard deviation of the sampling distribution is approximately equal to the population standard deviation divided by the square root of the sample size.


