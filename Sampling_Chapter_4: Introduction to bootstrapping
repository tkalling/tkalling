
Generate a single bootstrap resample from spotify_sample.

# Generate 1 bootstrap resample
spotify_1_resample = spotify_sample.sample(frac=1, replace=True)

# Print the resample
print(spotify_1_resample)

Calculate the mean of the danceability column of spotify_1_resample using numpy.

# Calculate of the danceability column of spotify_1_resample
mean_danceability_1 = np.mean(spotify_1_resample['danceability'])

# Print the result
print(mean_danceability_1)

Replicate the expression provided 1000 times.

# Replicate this 1000 times
mean_danceability_1000 = []
for i in range(1000):
	mean_danceability_1000.append(
        np.mean(spotify_sample.sample(frac=1, replace=True)['danceability'])
	)
  
# Print the result
print(mean_danceability_1000)

Create a bootstrap distribution by drawing a histogram of mean_danceability_1000.

# Draw a histogram of the resample means
plt.hist(mean_danceability_1000,bins=10)
plt.show()


Generate a sampling distribution of 2000 replicates.
Sample 500 rows of the population without replacement and calculate the mean popularity.

mean_popularity_2000_samp = []

# Generate a sampling distribution of 2000 replicates
for i in range(2000):
    mean_popularity_2000_samp.append(
    	# Sample 500 rows and calculate the mean popularity 
    	np.mean(spotify_population.sample(n=500, replace=False)['popularity'])
    )

# Print the sampling distribution results
print(mean_popularity_2000_samp)


Generate a bootstrap distribution of 2000 replicates.
Sample 500 rows of the sample with replacement and calculate the mean popularity.

mean_popularity_2000_boot = []

# Generate a bootstrap distribution of 2000 replicates
for i in range(2000):
    mean_popularity_2000_boot.append(
    	# Resample 500 rows and calculate the mean popularity     
    	np.mean(spotify_sample.sample(n=500, replace=True)['popularity'])
    )

# Print the bootstrap distribution results
print(mean_popularity_2000_boot)


Calculate the mean popularity in 4 ways:

Population: from spotify_population, take the mean of popularity.
Sample: from spotify_sample, take the mean of popularity.
Sampling distribution: from sampling_distribution, take its mean.
Bootstrap distribution: from bootstrap_distribution, take its mean.


# Calculate the population mean popularity
pop_mean = np.mean(spotify_population['popularity'])

# Calculate the original sample mean popularity
samp_mean = np.mean(spotify_sample['popularity'])

# Calculate the sampling dist'n estimate of mean popularity
samp_distn_mean = np.mean(sampling_distribution)

# Calculate the bootstrap dist'n estimate of mean popularity
boot_distn_mean = np.mean(bootstrap_distribution)

# Print the means
print([pop_mean, samp_mean, samp_distn_mean, boot_distn_mean])


Based on the four means you just calculated (pop_mean, samp_mean, samp_distn_mean, and boot_distn_mean), which statement is true?

The sampling distribution mean is the best estimate of the true population mean; the bootstrap distribution mean is closest to the original sample mean.


Calculate the standard deviation of popularity in 4 ways.

Population: from spotify_population, take the standard deviation of popularity.
Original sample: from spotify_sample, take the standard deviation of popularity.
Sampling distribution: from sampling_distribution, take its standard deviation and multiply by the square root of the sample size (5000).
Bootstrap distribution: from bootstrap_distribution, take its standard deviation and multiply by the square root of the sample size.


# Calculate the population std dev popularity
pop_sd = spotify_population['popularity'].std(ddof=0)

# Calculate the original sample std dev popularity
samp_sd = spotify_sample['popularity'].std()

# Calculate the sampling dist'n estimate of std dev popularity
samp_distn= np.std(sampling_distribution, ddof=1)
samp_distn_sd = samp_distn * np.sqrt(5000)

# Calculate the bootstrap dist'n estimate of std dev popularity
boot_distn = np.std(bootstrap_distribution, ddof=1)
boot_distn_sd = boot_distn * np.sqrt(5000)'


Based on the four results you just calculated (pop_sd, samp_sd, samp_distn_sd, and boot_distn_sd), which statement is true?

The calculation from the bootstrap distribution is the best estimate of the population standard deviation.


What information does that confidence interval provide?

A range of plausible values for an unknown quantity.


Generate a 95% confidence interval using the quantile method on the bootstrap distribution,
setting the 0.025 quantile as lower_quant and the 0.975 quantile as upper_quant.

# Generate a 95% confidence interval using the quantile method
lower_quant = np.quantile(bootstrap_distribution,0.025)
upper_quant = np.quantile(bootstrap_distribution, 0.975)

# Print quantile method confidence interval
print((lower_quant, upper_quant))


Generate a 95% confidence interval using the standard error method from the bootstrap distribution.

Calculate point_estimate as the mean of bootstrap_distribution, and standard_error as the standard deviation of bootstrap_distribution.
Calculate lower_se as the 0.025 quantile of an inv. CDF from a normal distribution with mean point_estimate and standard deviation standard_error.
Calculate upper_se as the 0.975 quantile of that same inv. CDF.


# Find the mean and std dev of the bootstrap distribution
point_estimate = np.mean(bootstrap_distribution)
standard_error = np.std(bootstrap_distribution, ddof=1)

# Find the lower limit of the confidence interval
lower_se = norm.ppf(0.025, loc=point_estimate, scale=standard_error)
# Find the upper limit of the confidence interval
upper_se = norm.ppf(0.975, loc=point_estimate, scale=standard_error)

# Print standard error method confidence interval
print((lower_se, upper_se))
